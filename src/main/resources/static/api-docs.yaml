openapi: 3.0.2
info:
  title: connector-administration-fachadmin-rest-api
  version: 1.5.31
  description: version of connector-administration-fachadmin-rest-api 1.5.31
tags:
  - name: 1.5.31
servers:
  - url: https://selfadmin-nb-iot.int2-ram.m2m.telekom.com
    description: test developer environment (int2-ram)
  - url: https://selfadmin-nb-iot.test-ram.m2m.telekom.com
    description: test preprod environment (test-ram)
paths:
  /devices:
    summary: Devices management resource
    description: API is targeted at Customer Users and allows management of devices
    servers:
      - url: https://{fachAdminApiUrl}
        description: ''
        variables:
          fachAdminApiUrl:
            default: selfadmin-nb-iot.int2-ram.m2m.telekom.com
            description: int2-ram environment
    get:
      tags:
        - Devices
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
          description: List of devices
      summary: Get list of devices
      description: Returns all devices belonging to the X-Customer-MandantID
    post:
      requestBody:
        description: Request body in JSON format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      tags:
        - Devices
      responses:
        '201':
          description: Device created
        '404':
          description: Device not found
      summary: Create device
      description: "Creates Device CoT + NBIoT Connector. Payload contains name, iccid, password, deviceType ID and contextDistribution = true in addition to the CoT username, password.\r\nThe Cloud of Things ID will be generated by the CoT"
    parameters:
      - examples:
          X-Custom-AuthenticationID:
            value: '2'
        name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: string
        in: header
        required: true
      - examples:
          X-Custom-MandantID:
            value: t24021684
        name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - examples:
          X-Custom-User:
            value: QXBpdXNlcjE6QXBpdXNlcjE=
        name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /{id}/topics:
    summary: List devices management
    description: List devices topics endpoint
    get:
      tags:
        - Topics
      parameters:
        - name: id
          description: 'ICCID of the device for which topics will be returned '
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
          description: List of device's topics
        '404':
          description: Device not found
      summary: List devices topics endpoint
      description: Returns the subscribed and published device topics of the device identified via iccid.
    parameters:
      - name: id
        description: iccid
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /internal/devices/{id}/parentDeviceCredentials:
    summary: Get parent device
    description: Endpoint to ger parent device for the provided device
    get:
      tags:
        - TOIL Devices
      parameters:
        - name: id
          description: ICCID of the device for which a parent device will be returned
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentDevice'
          description: Parent device
        '404':
          description: Device not found
      summary: Get Parent Devices Credentials
      description: This endpoint is used by TOIL's toil-c8y-proxy (FachAdminDeviceCredentialsService) to acquire CoT credentials for TOIL device data processing
    parameters:
      - name: id
        description: ICCID of the device for which a parent device will be returned
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /devices/{id}:
    summary: Device management resource
    description: device management by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      tags:
        - Devices
      responses:
        '204':
          description: Device updated
        '404':
          description: Device not found
      summary: Update device
      description: Update device endpoint
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextDistributionRequest'
        required: true
      tags:
        - Devices
      responses:
        '204':
          description: Device deleted
        '404':
          description: Device with id {} is not found in device repository
      summary: Delete device
      description: Deletes device by id. Payload contains contextDistribution = true/false
    parameters:
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
      - name: id
        description: ID of the device entity in database that will be updated
        schema:
          type: string
        in: path
        required: true
  /devicetypes:
    summary: Device type resource
    description: API allows management of device types
    get:
      tags:
        - Device Types
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceType'
          description: device type list
      summary: Get device types
      description: Lists all Device Types configured in the system
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceType'
        required: true
      tags:
        - Device Types
      responses:
        '201':
          content:
            application/json:
              schema:
                type: string
          description: Device type created
      summary: Create device type
    parameters:
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /devicetypes/{id}:
    summary: Device types resource
    description: API allows management of device types by device type id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceType'
        required: true
      tags:
        - Device Types
      parameters:
        - name: id
          description: Device type id
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: Device type updated
        '404':
          description: Could not find device type with id
      summary: Update device type
      description: Updates a Device Type with a name, a list of publish and subscribe topics and a plugin id.
    delete:
      tags:
        - Device Types
      parameters:
        - name: id
          description: Device type id
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: Device type deleted
        '404':
          description: Device type not found
      summary: Delete device type
    parameters:
      - name: id
        description: Device type id
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /plugins:
    summary: Plugins resources
    description: Plugins management API
    get:
      tags:
        - Plugins
      parameters:
        - name: name
          description: name of plugin
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
          description: Plugins
      summary: Get plugins
      description: Lists all Plugins configured in the system
    post:
      requestBody:
        description: Input stream of bytes
        content:
          pluginFile:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - Plugins
      parameters:
        - examples:
            PLUGIN_NAME:
              value: X-Custom-Pluginname
          name: PLUGIN_NAME
          description: name of plugin
          schema:
            type: string
          in: header
          required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: string
          description: Plugin created
        '403':
          description: Failed to save plugin
      summary: Create Plugin
      description: "Creates a new Plugin from a binary upload.\r\nThe Plugin ID will be generated by the system."
    parameters:
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /plugins/{id}:
    summary: Plugin resources
    description: Plugin management API
    put:
      requestBody:
        description: Input stream of bytes
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: false
      tags:
        - Plugins
      parameters:
        - name: id
          description: Plugin id
          schema:
            type: string
          in: path
          required: true
        - name: X-Custom-Pluginstate
          description: PLUGIN_STATE
          schema:
            type: string
          in: query
          required: true
      responses:
        '204':
          description: Plugin updated
      summary: Update plugin
      description: Updates a Plugin from a binary file. The X-Custom-Pluginstate header can be used to set the status of the Plugin to active / inactive.
    delete:
      tags:
        - Plugins
      parameters:
        - name: id
          description: Plugin id
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: string
          description: Plugin deleted
      summary: Delete plugin
      description: Delete plugin by id
    patch:
      tags:
        - Plugins
      parameters:
        - name: id
          description: Plugin id
          schema:
            type: string
          in: path
          required: true
        - name: X-Custom-Pluginstate
          description: PLUGIN_STATE
          schema:
            type: string
          in: query
          required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: string
          description: Plugin state updated
      summary: Update plugin state
    parameters:
      - name: id
        description: Plugin id
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
  /tenants:
    summary: Tenants resources
    description: Tenants management API
    get:
      tags:
        - Tenants
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
          description: list Tenants with obfuscated credentials
      summary: Get Tenants
      description: Returns list of Tenants. Delivers a list with one tenant for mandant id from AuthenticationQuadrupel. Parent password will be obfuscated.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: false
      tags:
        - Tenants
      responses:
        '204':
          description: Tenant upadated
        '404':
          description: Tenant user not found
      summary: Update Tenant
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: true
      tags:
        - Tenants
      responses:
        '201':
          description: Tenant created
        '403':
          description: Tenant already exists
      summary: Create Tenant
      description: "\tCreates a new Parent Device in the CoT and the Tenant in the NBIoT Connector. Payload contains name, parentDeviceUsername, contextDistribution = true and  “processingOperationsInactive” (true or false). The parentDeviceSystemId and parentDevicePassword will be created by the CoT. — deprecated -- The Parent Device is replaced by microservice user, the endpoint won’t create a tenant without subscription to the nbiot microservice in COT"
    parameters:
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /firmwares/{firmwareId}/distributions:
    summary: Distributions management API
    get:
      tags:
        - Firmwares
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Distribution'
          description: Distributions list
        '404':
          description: Firmware not found
      summary: Get Distributions
      description: Lists all Distributions of the Tenant of the User
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Distribution'
      tags:
        - Firmwares
      responses:
        '201':
          description: Distribution created
      summary: Create Distribution
    parameters:
      - name: firmwareId
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /firmwares/{firmwareId}/distributions/{distributionId}:
    summary: Distributions management API
    get:
      tags:
        - Firmwares
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Distribution'
          description: Distribution
        '404':
          description: Distribution Not Found
      summary: Get Distribution
      description: Details regarding the Distribution including Device IDs and their individual status.
    delete:
      tags:
        - Firmwares
      responses:
        '204':
          description: Distribution deleted
      summary: Delete Distribution
      description: Deletes the distribution with this ID.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Distribution'
      tags:
        - Firmwares
      responses:
        '204':
          description: Distribution for Firmware updated
      summary: Update Distribution for Firmware
      description: Payload contains desired execution time and an array of device IDs. Update is only possible if the previously set execution time is yet in the future. The Device list of the object will be replaced with the one in the payload.
    parameters:
      - name: firmwareId
        schema:
          type: string
        in: path
        required: true
      - name: distributionId
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /firmwares:
    summary: Firmwares Resource
    description: Firmwares management API
    get:
      tags:
        - Firmwares
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Firmware'
          description: Firmwares list
      summary: Get Firmwares
      description: Returns the firmwares of this X-Custom-MandantID
    post:
      requestBody:
        description: Input stream of bytes
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      tags:
        - Firmwares
      responses:
        '201':
          description: Firmware uploaded
      summary: Create Firmware
      description: Payload contains binary file. Returns an FirmwareId.
    parameters:
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /firmwares/{id}:
    summary: Firmwares Resource
    description: Firmwares management by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Firmware'
      tags:
        - Firmwares
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Firmware updated
        '404':
          description: Firmware not found
      summary: Update Firmware
      description: Payload contains name, version, deviceTypeId and whether this firmware is a patch
    delete:
      tags:
        - Firmwares
      responses:
        '204':
          description: Firmware deleted
        '404':
          description: Firmware not found
      summary: Delete Firmware
      description: Deletes the firmware with this ID
    parameters:
      - name: id
        description: Firmware ID
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-MandantID
        description: "tenant domain or tenantId that has bridge microservice deployed\r\n"
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /devices/{tenant}/{managedObjectId}:
    summary: Delete device
    description: Delete device by Tenant, Managed Object id and contextDistribution
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextDistributionRequest'
        required: true
      tags:
        - Devices
      responses:
        '204':
          description: Device deleted
        '404':
          description: Tenant and/or CloudOfThingsDeviceId not found!
      summary: Delete device
      description: 'Endpoint for deleting device by tenant, managed object ID and contextDistribution '
    parameters:
      - name: managedObjectId
        description: managed object ID of the device
        schema:
          type: string
        in: path
        required: true
      - name: tenant
        description: name of the tenant to which device belongs
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /tenants/{tenantName}:
    summary: Delete Tenant
    description: Delete Tenant by name and contextDistribution
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextDistributionRequest'
      tags:
        - Tenants
      responses:
        '204':
          description: Tenant Deleted
      summary: Delete Tenant
      description: "\tDeletes a tenant in NBIoT Connector. The parameter contextDistribution is true and the corresponding parent device will be deleted in CoT."
    parameters:
      - name: tenantName
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /tenants/{tenantName}/devices:
    summary: Delete devices
    description: Delete devices by tenant
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextDistributionRequestBody'
      tags:
        - Tenants
      responses:
        '204':
          description: Device deleted
        '404':
          description: Device is not registered yet in CoT and cannot be deleted
      summary: Delete devices
      description: Deletes device by Tenant name
    parameters:
      - name: tenantName
        schema:
          type: string
        in: path
        required: true
      - name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have nbiot-cot-bridge subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
  /devices/csv:
    summary: CSV devices management resource
    description: API is targeted at Customer Users and allows management of devices
    servers:
      - url: https://{fachAdminApiUrl}
        description: ''
        variables:
          fachAdminApiUrl:
            default: selfadmin-nb-iot.int2-ram.m2m.telekom.com
            description: int2-ram environment
    put:
      tags:
        - CSV Devices
      responses:
        '204':
          description: device updated
        '400':
          description: No upload content
      summary: Update CSV Devices
      description: Updates CSV Devices in CoT and NBIoT Connector. Payload contains CSV file
    post:
      tags:
        - CSV Devices
      parameters:
        - examples:
            X-Custom-AuthenticationID:
              value: '2'
          name: X-Custom-AuthenticationID
          description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have `nbiot-cot-bridge` subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
          schema:
            type: integer
          in: header
          required: true
        - examples:
            X-Custom-MandantID:
              value: t24021684
          name: X-Custom-MandantID
          description: tenant domain or tenantId that has bridge microservice deployed
          schema:
            type: string
          in: header
          required: true
        - examples:
            X-Custom-User:
              value: QXBpdXNlcjE6QXBpdXNlcjE=
          name: X-Custom-User
          description: header uses encoded NBIoT Connector user credentials
          schema:
            type: string
          in: header
          required: true
      responses:
        '201':
          headers:
            location:
              schema:
                type: string
          description: Device created
        '404':
          description: device not found
      summary: Create CSV Devices
      description: Registers CSV Devices in CoT + NBIoT Connector
    delete:
      tags:
        - CSV Devices
      parameters:
        - examples:
            X-Custom-AuthenticationID:
              value: '2'
          name: X-Custom-AuthenticationID
          description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have `nbiot-cot-bridge` subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
          schema:
            type: integer
          in: header
          required: true
        - examples:
            X-Custom-MandantID:
              value: t24021684
          name: X-Custom-MandantID
          description: tenant domain or tenantId that has bridge microservice deployed
          schema:
            type: string
          in: header
          required: true
        - examples:
            X-Custom-User:
              value: QXBpdXNlcjE6QXBpdXNlcjE=
          name: X-Custom-User
          description: header uses encoded NBIoT Connector user credentials
          schema:
            type: string
          in: header
          required: true
      responses:
        '204':
          description: device deleted
        '404':
          description: Device not found
      summary: Delete CSV Devices
      description: Deletes CSV Devices from CoT + NBIoT Connector
    parameters:
      - examples:
          X-Custom-AuthenticationID:
            value: '2'
        name: X-Custom-AuthenticationID
        description: "Notice that in example request authentication (X-Custom-AuthenticationID: 2) is performed against CoT and that’s why it is important to have `nbiot-cot-bridge` subscribed by tenant: to allow credentials to be auto discoverable by NBIoT Connectors fachadmin service. Currently this sort of automatic tenant registration is recommended.\r\n\r\nNotice that in case of authentication against connector 'X-Custom-AuthenticationID: 1` one should use user with role FACHADMIN."
        schema:
          type: integer
        in: header
        required: true
      - examples:
          X-Custom-MandantID:
            value: t24021684
        name: X-Custom-MandantID
        description: tenant domain or tenantId that has bridge microservice deployed
        schema:
          type: string
        in: header
        required: true
      - examples:
          X-Custom-User:
            value: QXBpdXNlcjE6QXBpdXNlcjE=
        name: X-Custom-User
        description: header uses encoded NBIoT Connector user credentials
        schema:
          type: string
        in: header
        required: true
      - name: Set-Cookie
        description: ''
        schema: {}
        in: cookie
      - name: contextDistribution
        description: boolean value - if device also needs to be deleted from CoT
        schema:
          type: boolean
        in: query
components:
  schemas:
    Device:
      description: ''
      maxProperties: 24
      minProperties: 24
      required:
        - name
        - contextDistribution
        - iccid
        - cloudOfThingsPassword
        - cloudOfThingsUsername
        - active
      type: object
      properties:
        id:
          description: 'Device ID. This ID is used by NBIoT Connector as CoT username for device created in the following format: device_<ID from csv file>'
          type: string
          example: 11111deviceid22222233333
        name:
          description: Device name
          type: string
          example: MQTTSD113000111
        blacklist:
          description: adittional flag
          type: boolean
          readOnly: true
        contextDistribution:
          description: Additional flag to save device in CoT/NBIoT Connector
          type: boolean
        iccid:
          writeOnly: false
          description: This id is used by NBIoT Connector during creation of a NBIoT Connector user for this device. This is important field for connector as it will be used during device authentication while connect to MQTT Broker
          maxLength: 15
          minLength: 15
          type: string
          readOnly: false
        cloudOfThingsPassword:
          description: Device password in CoT
          maxLength: 8
          minLength: 8
          type: string
          example: Device_123
        cloudOfThingsUsername:
          description: User name in CoT
          maxLength: 15
          minLength: 15
          type: string
        cloudOfThingsDeviceId:
          description: Device id in CoT
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        createdAt:
          description: device creation date
          type: string
        updatedAt:
          description: device update date
          type: string
        active:
          type: boolean
    Tenant:
      description: Tenant to be used for device onboarding is subscribed to Nbiot-cot-bridge CoT microservice. Hence without tenant subscribed to this CoT microservice there is no way for NBIoT Connector access CoT.
      required:
        - name
      type: object
      properties:
        name:
          description: Tenant name
          type: string
    Topic:
      description: ''
      type: object
      properties:
        path:
          description: ''
          type: string
        type:
          description: ''
          enum:
            - SUBSCRIBE
            - PUBLISH
          type: string
        allowed:
          description: ''
          type: boolean
    ParentDevice:
      description: ''
      type: object
      properties:
        cotUsername:
          description: ''
          type: string
        cotPassword:
          description: ''
          type: string
        cotTenant:
          description: ''
          type: string
    ContextDistributionRequest:
      description: holder of boolean value - if device also needs to be deleted from CoT
      required:
        - contextDistribution
      type: object
      properties:
        contextDistribution:
          description: boolean value - if device also needs to be deleted from CoT
          type: boolean
    DeviceType:
      description: Device type
      required:
        - id
        - name
      type: object
      properties:
        id:
          description: Device type id
          type: string
        name:
          description: 'Device type name. Should be one of the either following list: MQTT, NBIOT, TOIL or the name of custom device type'
          type: string
        publishTopics:
          description: ''
          type: array
          items:
            type: string
        subscribeTopics:
          description: ''
          type: array
          items:
            type: string
        plugin:
          $ref: '#/components/schemas/Plugin'
    Plugin:
      description: 'NBIoT Connector contains a suitable plugin for device type. By default NBIoT Connector contains following plugins: SmartRestPlugin - Smart REST is CoT feature that allows to make REST API communication more light-weight by support of payload templates (has to be created in CoT first). Considered to be used mostly with MQTT devices. PrototypeHubPlugin - Plugin to support MQTT-SN devices, PrototypeHubPluginToil - Plugin to be used with TOIL devices'
      type: object
      properties:
        id:
          description: plugin id
          type: string
        name:
          description: plugin name
          type: string
        version:
          description: plugin version
          type: string
        fileId:
          description: ''
          type: string
        className:
          description: ''
          type: string
        active:
          description: ''
          type: boolean
        metaData:
          $ref: '#/components/schemas/PluginMetaData'
    Distribution:
      description: Distributions of Tenant of User
      required:
        - executionTime
        - devices
      type: object
      properties:
        id:
          description: ''
          type: string
        status:
          description: ''
          type: string
        executionTime:
          description: ''
          type: string
        distributionUUID:
          $ref: '#/components/schemas/UUID'
        firmware:
          $ref: '#/components/schemas/Firmware'
        metadata:
          $ref: '#/components/schemas/DistributionMetaData'
        devices:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/DistributionDevice'
    DistributionDevice:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: string
        iccid:
          description: ''
          type: string
        lastUpdated:
          description: ''
          type: string
        status:
          description: ''
          enum:
            - PENDING
            - ANNOUNCEMENT_RECEIVED
            - EXECUTING
            - SUCCESSFUL
            - FAILED
            - ERROR_PROCESSING_ANNOUNCEMENT
            - UNKNOWN_PROTOCOL_VERSION
            - DOWNLOAD_FAILED
            - INTEGRETY_CHECK_FAILED
            - INSTALLATION_FAILED
            - INSTALLATION_NOT_REASONABLE
            - UNKNOWN
          type: string
    UUID:
      description: universally unique identifier (UUID)
      type: string
    Firmware:
      description: ''
      required:
        - version
        - isPatch
        - deviceTypeId
      type: object
      properties:
        id:
          description: ''
          type: string
        name:
          description: ''
          type: string
        version:
          description: ''
          maxLength: 4
          minLength: 4
          type: string
        isPatch:
          description: ''
          type: boolean
        deviceTypeId:
          description: ''
          type: boolean
        fileId:
          description: ''
          type: string
        file:
          $ref: '#/components/schemas/FirmwareFileMetaData'
        metaData:
          $ref: '#/components/schemas/FirmwareMetaData'
    FirmwareFileMetaData:
      description: ''
      type: object
      properties:
        name:
          description: ''
          type: string
        size:
          format: int64
          description: ''
          type: integer
        md5Checksum:
          description: ''
          type: string
    FirmwareMetaData:
      description: ''
      type: object
    ContextDistributionRequestBody:
      description: holder of boolean value - if device also needs to be updated in CoT
      type: object
      properties:
        contextDistribution:
          description: ''
          type: boolean
    PluginMetaData:
      description: ''
      type: object
      properties:
        uploadedBy:
          description: ''
          type: string
        uploadedAt:
          $ref: '#/components/schemas/Date'
        updatedBy:
          description: ''
          type: string
        updatedAt:
          $ref: '#/components/schemas/Date'
    Date:
      description: represents a specific instant in time, with millisecond precision
      type: string
      example: '2020-02-06T16:44:46.221+00:00'
    DistributionMetaData:
      description: ''
      type: object
      properties:
        createdBy:
          description: ''
          type: string
        createdAt:
          $ref: '#/components/schemas/Date'
        updatedBy:
          description: ''
          type: string
        updatedAt:
          $ref: '#/components/schemas/Date'
  securitySchemes:
    Network:
      scheme: basic
      type: http

